#!/bin/sh

dir=/var/tmp
log=$dir/stsx.log

if [ x`id -u` != x0 ] ; then
  echo "call as root!"
  exit 1
fi

#
# Args analysis
#

method="$1"
watchdog="$2 $3"
maxnum="$4"
if [ "x$1" = x ] ; then
  cat 1>&2 <<"EOUSAGE"
Usage: $0 <s4|s4k|s3|s3k|s4simdev|s4simcore|s3simdev|s3simplatform|s3simcore|s4simcpu> [watchdog port [maxnum]]

Possible deductions:
simdev fails                 -> no BIOS issue
simcore passes AND s4k fails -> BIOS issue
s4simcpu fails		     -> no BIOS issue + CPU hotplug bug

Only use coresim on machines that switch off power to busses in ACPI.

EOUSAGE
  exit 1
fi
if [ "x$watchdog" = "x " ] ; then
  watchdog=""
fi
if [ "x$maxnum" = x ] ; then
  maxnum=9999999999
fi

delay=10
resume=""
simulation="none"

case "x$method" in
xs4)		resume=70;		;;
xs4k)		resume=70;		;;
xs3)		resume=20;		;;
xs3k)		resume=20;		;;
xs43)		alternate=1;		method="s4"	resume=70	;;
xs43k)          alternate=1;      	method="s4"	resume=70	;;
xs4simdev)	simulation="devices";	delay=5;	;;
xs4simcore)	simulation="core";	delay=5;	;;
xs3simdev)	simulation="devices";	delay=5;	;;
xs3simplatform) simulation="platform";  delay=5;	;;
xs3simcore)	simulation="core";	delay=5;	;;
xs4simcpu)	simulation="processors";delay=0;	;;
*)
  echo "unknown method $method"
  exit 1
esac

#
# Preparations
#

if [ "x$resume" != x ] ; then

  # Set hwclock as UTC to current clock
  . /etc/sysconfig/clock
  if [ "x$HWCLOCK" != x-u ] ; then
    echo "!!ATTENTION!! Setting up UTC hw clock"
    sed -i '/^HWCLOCK=/s/.*/HWCLOCK="-u"/' /etc/sysconfig/clock
  fi
  /sbin/hwclock --systohc -u

fi

# Disable auto suspend / blank
if [ x`gconftool-2 -g /apps/gnome-power-manager/timeout/sleep_computer_ac` != x0 ] ; then
  echo "!!ATTENTION!! Disabling auto sleep and screen saver"
  gconftool-2 -s /apps/gnome-power-manager/timeout/sleep_computer_ac --type int 0
  gconftool-2 -s /apps/gnome-screensaver/idle_activation_enabled --type bool false
fi

echo ""

#instruct the kernel
echo $simulation > /sys/power/pm_test
pmtrace=1
test "x$simulation" = xnone && pmtrace=0
test -e /sys/power/pm_trace && echo $pmtrace > /sys/power/pm_trace

#
# State dumper
#

dump_state() {
  echo "======================================"
  echo "PCI CONFIG SPACE"
  echo "--------------------------------------"
  /sbin/lspci -xxxvv
  echo "======================================"
  echo "DMI"
  echo "--------------------------------------"
  /usr/sbin/dmidecode
  echo "======================================"
  echo "dmesg"
  echo "--------------------------------------"
  dmesg
}

#
# Other subroutines
#

set_alarm() {
  while true ; do
    echo 0 >/sys/class/rtc/rtc0/wakealarm && break
    sleep 1
  done
  while true ; do
    echo $t >/sys/class/rtc/rtc0/wakealarm && break
    sleep 1
  done
  sleep 1
}

#
# Main loop
#

echo "Logging to $log + $dir/stsx.state.*"
echo ""
rm -f $log
find $dir -name stsx.state.\* -exec rm  \{\} \+
:> $log
c=0
nextsync=20

while [ $c -lt $maxnum ] ; do

  # Setup delay
  if [ "x$delay" != x0 ] ; then
    echo "Sleeping $delay secs..."
    sleep $delay
  fi

  # State dump
  c=$(($c+1))
  dump_state >$dir/stsx.state.$c 2>&1
  gzip $dir/stsx.state.$c

  # Setting info to watchdog
  # Do after sleep (so networkmanager has a chance)
  # TODO: send state shortcut
  if [ "x$watchdog" != x ] ; then
    echo "$method $c" | netcat $watchdog
  fi
  if [ "x$resume" != x ] ; then

    # Resync HW clock
    if [ $c -ge $nextsync ] ; then
      echo "resyncing clock..."
      /sbin/hwclock --hctosys -u
      nextsync=$(($nextsync+20))
    fi

    # Resume time calc
    t=`date +%s -d "$resume secs"`
    tt="`date -d @$t`"
    echo "$method sim $simulation $c: Wakeup at $tt"
    echo "$method sim $simulation $c: Wakeup at $tt" >>$log

  fi

  d="`date`"
  echo "$method sim $simulation $c: $d: suspending..."
  echo "$method sim $simulation $c: $d: suspending..." >>$log

  # Emergency sync
  sync

  # Suspend/Hibernate
  case "x$method" in
  xs4)
    set_alarm $t
    pm-hibernate
    ;;
  xs4k)
    set_alarm $t
    echo disk >/sys/power/state
    ;;
  xs3)
    #NUM_SECONDS_TO_SLEEP=$resume pm-suspend
    set_alarm $t
    pm-suspend
    ;;
  xs3k)
    set_alarm $t
    echo mem >/sys/power/state
    ;;
  xs4sim*)
    echo disk >/sys/power/state
    ;;
  xs3sim*)
    echo mem >/sys/power/state
    ;;
  *)
    exit 1;
  esac

  # Post-resume
  d="`date`"
  echo "$method sim $simulation $c: $d: resuming" >>$log
  sync
  echo "$method sim $simulation $c: $d: resuming"


  if [ $alternate -eq 1 ] ; then
	if [ "$method" == "s4" ] ; then
	    resume=20
	    method="s3"
	else
	    resume=70
	    method="s4"
	fi
  fi


done

#
# EOT
#
echo "none" >/sys/power/pm_test
echo "Maximum reached"
echo "Maximum reached" >>$log

exit 0

